input {
  file {
    path => "/usr/share/logstash/logs/*-audit_labeled.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "read"
    type => "linux_audit"
    tags => ["audit"]
    codec => plain { charset => "UTF-8" }
  }

  file {
    path => "/usr/share/logstash/logs/*-auth_labeled.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "read"
    type => "linux_auth"
    tags => ["auth"]
    codec => plain { charset => "UTF-8" }
  }
}

filter {
  ######################################################
  # Extract IP address from filename (common to both)  #
  ######################################################
grok {
    match => { "[log][file][path]" => ".*/(?<ip_raw>\d+_\d+_\d+_\d+)-(audit|auth)_labeled\.log" }
  }

  mutate {
    gsub => [ "ip_raw", "_", "." ]
    add_field => { "[host][ip]" => "%{ip_raw}" }
  }


  ######################################################
  # ----------- Filter for Audit Logs ---------------- #
  ######################################################
  if "audit" in [tags] {
    kv {
      source => "message"
      value_split => "="
      field_split => " "
      trim_key => " "
    }

    grok {
      match => { "message" => "audit\((?<audit_ts>[0-9]+\.[0-9]+):%{NUMBER:event_id}\)" }
    }

    date {
      match => ["audit_ts", "UNIX"]
      target => "@timestamp"
    }

    mutate {
      remove_field => ["audit_ts"]
    }
  }

  ######################################################
  # ------------ Filter for Auth Logs ---------------- #
  ######################################################
if "auth" in [tags] {
    grok {
        match => {
            "message" => "^%{SYSLOGTIMESTAMP:syslog_time} %{HOSTNAME:syslog_host} %{DATA:process}(?:\[%{NUMBER:pid}\])?: %{GREEDYDATA:syslog_message}"
        }
    }

    date {
        match => ["syslog_time", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"]
        target => "@timestamp"
        add_field => { "[@metadata][year]" => "2021" }
    }

    ruby {
        code => '
            event.set("@timestamp", LogStash::Timestamp.new(Time.parse("#{event.get("[@metadata][year]")} #{event.get("@timestamp").time.strftime("%m-%d %H:%M:%S")}")))
        '
    }

    if "sshd" in [process] {
      grok {
        match => {
          "syslog_message" => [
            "Accepted password for %{USER:user} from %{IP:source_ip} port %{NUMBER:source_port} ssh2",
            "Disconnected from user %{USER:user} %{IP:source_ip} port %{NUMBER:source_port}",
            "Received disconnect from %{IP:source_ip} port %{NUMBER:source_port}:%{GREEDYDATA:disconnect_reason}",
            "pam_unix\(sshd:session\): session (opened|closed) for user %{USER:user}"
          ]
        }
      }
    } else if "systemd-logind" in [process] {
      grok {
        match => {
          "syslog_message" => [
            "New session %{NUMBER:session_id} of user %{USER:user}",
            "Removed session %{NUMBER:session_id}",
            "Session %{NUMBER:session_id} logged out"
          ]
        }
      }
    } else if "cron" in [process] {
      grok {
        match => {
          "syslog_message" => "pam_unix\(cron:session\): session (opened|closed) for user %{USER:user}"
        }
      }
    }

    mutate {
      remove_field => ["syslog_time"]
    }
  }

  ##############################
  # Cleanup for all log types #
  ##############################
  mutate {
    remove_field => ["ip_raw", "[log][file][path]"]
  }
}

output {
  if "audit" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "linux-audit-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "changeme"
    }
  }

  if "auth" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "linux-auth-%{+2021.MM.dd}"
      user => "elastic"
      password => "changeme"
    }
  }

  stdout { codec => rubydebug }
}